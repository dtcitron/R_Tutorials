pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
library(igraph)
# Create 32 feeding sites, defined by their (x,y) coordinates
xf <- c(rnorm(20, 2, 1), rnorm(10, 8, 1), rnorm(2, 7,.5))
yf <- c(rnorm(20, 3, 1), rnorm(10, 10, 1), rnorm(2,7,.5))
# Define the "attractiveness" weight of each feeding site
wf <- rgamma(length(xf), 5, 5)
# Create 29 egg laying sites, defined by their (x,y) coordinates
xl = c(rnorm(5, 2, .5), rnorm(14, 9, .5), rnorm(10, 8, .5))
yl = c(rnorm(5, 4, .5), rnorm(14, 4, .5), rnorm(10, 10, .5))
# Define the "attractiveness" weight of each egg laying site
wl = rgamma(length(xl), 5, 5)
par(mar=c(0,6,0,5))
# Plot blood feeding sites in Red
plot(xf, yf, pch = 19, col = "red", ylim = c(-1,12), xlim = c(-1,12), xlab = "", xaxt = "n", ylab = "", yaxt = "n", cex = wf, asp = 1)
# Plot egg laying sites in Blue
points(xl, yl, pch = 8, col = "blue", cex= wl)
# Calculate interaction strength between two sites (x,y) and (X,Y)
kerW <- function(x, y, X, Y, w, p=1){
# Calculate the distance between the two sites (x,y) and (X,Y)
d = sqrt( (x - X)^2 + (y - Y)^2)
# Incorporate the attractiveness of the target site
exp(-d*p)*w
}
# Vectorize:
# For a single point (x,y), return all interaction strengths between that point and the list of target points (XX, YY)
kerW.i <- function(i, x, y, XX, YY, w, p=1){
kerW(x[i], y[i], XX, YY, w, p)
}
# Interaction strength from each egg-laying site -> each blood-feeding site
LF = sapply(X=c(1:length(xl)), FUN=kerW.i, x=xl, y=yl, XX=xf, YY=yf, w=wf, simplify = "array")
# Interaction strength from each blood-feeding site -> each egg-laying site
FL = sapply(X=c(1:length(xf)), FUN=kerW.i, x=xf, y=yf, XX=xl, YY=yl, w=wl, simplify = "array")
# Transpose, because of R's axis conventions
LF = t(LF)
FL = t(FL)
# If you are confused about the axes of these matrices, try using dim(LF) and dim(FL) to count rows and columns, since there are different numbers of each type of site
Q = LF%*%FL
# Row-normalize Q, so that it represents the probability of hopping for one egg-laying site to another egg-laying site
# Q = Q / rowSums(Q)
# Asymmetric piece
N = matrix(pmax(0, Q - t(Q)), length(xl), length(xl))
# Symmetric piece
C = Q-N
par(mfrow=c(1,2))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
Q = LF%*%FL
# Row-normalize Q, so that it represents the probability of hopping for one egg-laying site to another egg-laying site
Q = Q / rowSums(Q)
# Asymmetric piece
N = matrix(pmax(0, Q - t(Q)), length(xl), length(xl))
# Symmetric piece
C = Q-N
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N")
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,-1,0,0))
par(mfrow=c(1,2))
par(mar=c(0,1,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C")
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N")
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -2)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N")
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
qnet = graph_from_adjacency_matrix(Q, weighted = TRUE, mode = "directed")
qnet.n = graph_from_adjacency_matrix(N, weighted = TRUE, mode = "directed")
qnet.c = graph_from_adjacency_matrix(C, weighted = TRUE, mode = "undirected")
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
plot(walk.c, qnet.n,
edge.arrow.size = E(qnet.n)$weight*20,
edge.width = E(qnet.n)$weight*20
)
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*2#,
)
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*2#,
)
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
dendPlot(walk.c, mode = "hclust")
plot(walk.c, qnet.n,
edge.arrow.size = E(qnet.n)$weight*20,
edge.width = E(qnet.n)$weight*20
)
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
# Plot dendrogram
dendPlot(walk.c, mode = "hclust")
# The node numbers 1-5 correspond to the lower left-hand cluster of egg-laying sites.  The node numbers 20-24 correspond to the
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
# Plot dendrogram
dendPlot(walk.c, mode = "hclust")
# The node numbers 1-5 correspond to the lower left-hand cluster of egg-laying sites.  The node numbers 20-24 correspond to the
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*2
)
source('~/Documents/Landscape/community_landscape_igraph.R', echo=TRUE)
walk.c <- cluster_walktrap(qnet.c, weights = E(qnet.c)$weight)
dendPlot(walk.c, mode = "hclust")
plot(walk.c, qnet.n,
edge.arrow.size = E(qnet.n)$weight*20,
edge.width = E(qnet.n)$weight*20
)
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*2#,
)
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*5, edge.width = E(qnet.n)$weight*5
)
# Visualize the network
# Here, the nodes are colored and grouped according to community
# and the edges are drawn with directions and weights given by N
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*5, edge.width = E(qnet.n)$weight*5
)
# Visualize the network
# Here, the nodes are colored and grouped according to community
# and the edges are drawn with directions and weights given by N
plot(qnet.n,
vertex.color = walk.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
m <- membership(walk.c)
k <- length(unique(m))
coarse.grain <- array(0, dim = c(k,k))
for (i in seq(1,length(E(qnet.n)))) {
xy <- ends(qnet.n, E(qnet.n)[i]);
w <- E(qnet.n)$weight[i];
coarse.grain[m[xy[1]],m[xy[2]]] = coarse.grain[m[xy[1]],m[xy[2]]] + w}
plot(cg.net, edge.width = (E(cg.net)$weight)^.2,# edge.arrow.size = (E(cg.net)$weight)^.2/2,
vertex.color = c(1:k), vertex.size = 3*matrix(table(membership(walk.c))))
cg.net <- coarse.grain
plot(cg.net, edge.width = (E(cg.net)$weight)^.2,# edge.arrow.size = (E(cg.net)$weight)^.2/2,
vertex.color = c(1:k), vertex.size = 3*matrix(table(membership(walk.c))))
coarse.grain
cg.net <- graph_from_adjacency_matrix(coarse.grain, weighted = TRUE, mode = "directed")
plot(cg.net, edge.width = (E(cg.net)$weight)^.2,# edge.arrow.size = (E(cg.net)$weight)^.2/2,
vertex.color = c(1:k), vertex.size = 3*matrix(table(membership(walk.c))))
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
#title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
# This maps nodes onto their communities
m <- membership(walk.c)
k <- length(unique(m))
coarse.grain <- array(0, dim = c(k,k))
for (i in seq(1,length(E(qnet.n)))) {
xy <- ends(qnet.n, E(qnet.n)[i]);
w <- E(qnet.n)$weight[i];
coarse.grain[m[xy[1]],m[xy[2]]] = coarse.grain[m[xy[1]],m[xy[2]]] + w}
cg.net <- graph_from_adjacency_matrix(coarse.grain, weighted = TRUE, mode = "directed")
plot(cg.net, edge.width = (E(cg.net)$weight)^.2,# edge.arrow.size = (E(cg.net)$weight)^.2/2,
vertex.color = c(1:k), vertex.size = 3*matrix(table(membership(walk.c))))
info.q <- cluster_infomap(qnet, e.weights = edge_attr(qnet)$weight, modularity = FALSE)
# Plot dendrogram
dendPlot(info.c, mode = "hclust")
info.q <- cluster_infomap(qnet, e.weights = edge_attr(qnet)$weight, modularity = FALSE)
dendPlot(info.q, mode = "hclust")
info.c <- cluster_infomap(qnet.c, e.weights = edge_attr(qnet)$weight, modularity = FALSE)
# Plot dendrogram
dendPlot(info.c, mode = "hclust")
dendPlot(info.c, mode = "hclust")
info.c <- cluster_infomap(qnet.c, e.weights = edge_attr(qnet.c)$weight, modularity = FALSE)
dendPlot(info.c, mode = "hclust")
info.c <- cluster_infomap(qnet.c, e.weights = edge_attr(qnet.c)$weight, modularity = FALSE)
plot(qnet.n,
vertex.color = info.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
# Visualize the network
plot(qnet.n,
vertex.color = info.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
# Visualize the network
plot(qnet.n,
vertex.color = info.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
info.q <- cluster_infomap(qnet, e.weights = edge_attr(qnet)$weight, modularity = FALSE)
par(mfrow=c(1,2))
par(mfrow=c(1,2))
# Visualize the networks
plot(qnet.n,
vertex.color = info.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
plot(qnet.n,
vertex.color = info.q$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
par(mfrow=c(1,2))
# Visualize the networks
plot(qnet.n,
vertex.color = info.c$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
plot(qnet.n,
vertex.color = info.q$membership,
edge.arrow.size = E(qnet.n)$weight*2, edge.width = E(qnet.n)$weight*5
)
# Create 32 feeding sites, defined by their (x,y) coordinates
xf <- c(rnorm(20, 2, 1), rnorm(10, 8, 1), rnorm(2, 7,.5))
yf <- c(rnorm(20, 3, 1), rnorm(10, 10, 1), rnorm(2,7,.5))
# Define the "attractiveness" weight of each feeding site
wf <- rgamma(length(xf), 5, 5)
# Create 29 egg laying sites, defined by their (x,y) coordinates
xl = c(rnorm(5, 2, .5), rnorm(14, 9, .5), rnorm(10, 8, .5))
yl = c(rnorm(5, 4, .5), rnorm(14, 4, .5), rnorm(10, 10, .5))
# Define the "attractiveness" weight of each egg laying site
wl = rgamma(length(xl), 5, 5)
par(mar=c(0,6,0,5))
# Plot blood feeding sites in Red
plot(xf, yf, pch = 19, col = "red", ylim = c(-1,12), xlim = c(-1,12), xlab = "", xaxt = "n", ylab = "", yaxt = "n", cex = wf, asp = 1)
# Plot egg laying sites in Blue
points(xl, yl, pch = 8, col = "blue", cex= wl)
par(mar=c(0,6,0,5))
# Plot blood feeding sites in Red
plot(xf, yf, pch = 19, col = "red", ylim = c(-1,12), xlim = c(-1,12), xlab = "", xaxt = "n", ylab = "", yaxt = "n", cex = wf, asp = 1)
# Plot egg laying sites in Blue
points(xl, yl, pch = 8, col = "blue", cex= wl)
par(mar=c(0,6,0,5))
# Plot blood feeding sites in Red
plot(xf, yf, pch = 19, col = "red", ylim = c(-1,12), xlim = c(-1,12), xlab = "", xaxt = "n", ylab = "", yaxt = "n", cex = wf, asp = 1)
# Plot egg laying sites in Blue
points(xl, yl, pch = 8, col = "blue", cex= wl)
# Calculate interaction strength between two sites (x,y) and (X,Y)
kerW <- function(x, y, X, Y, w, p=1){
# Calculate the distance between the two sites (x,y) and (X,Y)
d = sqrt( (x - X)^2 + (y - Y)^2)
# Incorporate the attractiveness of the target site
exp(-d*p)*w
}
# Vectorize:
# For a single point (x,y), return all interaction strengths between that point and the list of target points (XX, YY)
kerW.i <- function(i, x, y, XX, YY, w, p=1){
kerW(x[i], y[i], XX, YY, w, p)
}
# Calculate interaction strength between two sites (x,y) and (X,Y)
kerW <- function(x, y, X, Y, w, p=1){
# Calculate the distance between the two sites (x,y) and (X,Y)
d = sqrt( (x - X)^2 + (y - Y)^2)
# Incorporate the attractiveness of the target site
exp(-d*p)*w
}
# Vectorize:
# For a single point (x,y), return all interaction strengths between that point and the list of target points (XX, YY)
kerW.i <- function(i, x, y, XX, YY, w, p=1){
kerW(x[i], y[i], XX, YY, w, p)
}
# Interaction strength from each egg-laying site -> each blood-feeding site
LF = sapply(X=c(1:length(xl)), FUN=kerW.i, x=xl, y=yl, XX=xf, YY=yf, w=wf, simplify = "array")
# Interaction strength from each blood-feeding site -> each egg-laying site
FL = sapply(X=c(1:length(xf)), FUN=kerW.i, x=xf, y=yf, XX=xl, YY=yl, w=wl, simplify = "array")
# Transpose, because of R's axis conventions
LF = t(LF)
FL = t(FL)
# If you are confused about the axes of these matrices, try using dim(LF) and dim(FL) to count rows and columns, since there are different numbers of each type of site
Q = LF%*%FL
# Row-normalize Q, so that it represents the probability of hopping for one egg-laying site to another egg-laying site
Q = Q / rowSums(Q)
# (To be honest, I'm not sure whether row-normalizing is correct here, but in practice we have total control over how we're defining these matrixes.)
# Asymmetric piece
N = matrix(pmax(0, Q - t(Q)), length(xl), length(xl))
# Symmetric piece
C = Q-N
par(mfrow=c(1,2))
par(mar=c(0,0,0,0))
# Symmetric component
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n")
title("Symmetric component C", line = -1)
for(i in 1:length(xl))
for(j in i:length(xl))
segments(xl[i], yl[i], xl[j], yl[j], lwd = C[i,j])
# Asymmetric component, net flow on the landscape
plot(xl, yl, cex = .1,
pch = 16, col = "blue", ylim = c(-1,12), xlim = c(-1,12),
xlab = "", xaxt = "n", ylab = "", yaxt = "n", asp = 1)
title("Asymmetric component N", line = -1)
for(i in 1:length(xl))
for(j in 1:length(xl))
arrows(xl[i], yl[i], xl[j], yl[j], lwd = N[i,j], length = .05)
